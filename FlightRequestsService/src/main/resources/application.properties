spring.application.name = flight-request-service
server.port = 8082

spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.PostgreSQLDialect
spring.jpa.hibernate.ddl-auto=none

spring.datasource.url=jdbc:postgresql://localhost:5432/
spring.datasource.username=postgres
spring.datasource.password=password
spring.datasource.initialization-mode=always
spring.datasource.schema=classpath:/schema.sql

eureka.client.registerWithEureka = true
eureka.client.fetchRegistry = true
eureka.client.serviceUrl.defaultZone = ${vcap.services.eureka-url.credentials.url:http://localhost:8761}/eureka
eureka.instance.hostname = ${vcap.application.uris[0]:localhost}

spring.rabbitmq.host=localhost
spring.rabbitmq.port=5672
spring.rabbitmq.username=guest
spring.rabbitmq.password=guest

skyScannerServiceAmqp.exchange = skyscanner
skyScannerServiceAmqp.requestsQueue = skyscanner-requests
skyScannerServiceAmqp.requestRoutingKey = request
skyScannerServiceAmqp.eventsQueue = skyscanner-events


flightRequest.geoCatalogService.url = http://geo-catalog-service/
flightRequest.geoCatalogService.childAirportsEndPoint = getChild/

flightRequest.skyScannerService.url = http://sky-scanner-service/
flightRequest.skyScannerService.pollEndPoint = poll/


#logging.level.org.springframework.web=TRACE
#logging.level.org.apache: trace
#logging.level.org.hibernate.type=TRACE

#spring.jpa.show-sql=true
#spring.jpa.properties.hibernate.format_sql=true